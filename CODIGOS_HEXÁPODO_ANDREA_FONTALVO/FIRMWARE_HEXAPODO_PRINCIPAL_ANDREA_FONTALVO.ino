//LIBRARIES
#include <Servo.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define OLED_MOSI   9
#define OLED_CLK   10
#define OLED_DC    11
#define OLED_CS    12
#define OLED_RESET 13
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
static const unsigned char PROGMEM arrow_forward_bmp[] =
{
  B00000000, B00000000, B00000000, B00000001, B10000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000011, B11000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000111, B11100000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00001111, B11110000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00011111, B11111000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00111111, B11111100, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B01111111, B11111110, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,

  B00000000, B00000000, B00000001, B11111111, B11111111, B10000000, B00000000, B00000000,
  B00000000, B00000000, B00000011, B11111111, B11111111, B11000000, B00000000, B00000000,
  B00000000, B00000000, B00000111, B11111111, B11111111, B11100000, B00000000, B00000000,
  B00000000, B00000000, B00001111, B11111111, B11111111, B11110000, B00000000, B00000000,
  B00000000, B00000000, B00011111, B11111111, B11111111, B11111000, B00000000, B00000000,
  B00000000, B00000000, B00111111, B11111111, B11111111, B11111100, B00000000, B00000000,
  B00000000, B00000000, B01111111, B11111111, B11111111, B11111110, B00000000, B00000000,
  B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000,

  B00000000, B00000001, B11111111, B11111111, B11111111, B11111111, B10000000, B00000000,
  B00000000, B00000011, B11111111, B11111111, B11111111, B11111111, B11000000, B00000000,
  B00000000, B00000111, B11111111, B11111111, B11111111, B11111111, B11100000, B00000000,
  B00000000, B00001111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000,
  B00000000, B00011111, B11111111, B11111111, B11111111, B11111111, B11111000, B00000000,
  B00000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111100, B00000000,
  B00000000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111110, B00000000,
  B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000,

  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,

  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000
};



static const unsigned char PROGMEM arrow_right_bmp[] =
{
  B00000000, B00000000, B10000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11100000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11111100, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11111110, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,

  B00000000, B00000000, B11111111, B10000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11111111, B11100000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11111111, B11111000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11111111, B11111100, B00000000, B00000000, B00000000, B00000000,
  B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000,
  B11111111, B11111111, B11111111, B11111111, B10000000, B00000000, B00000000, B00000000,
  B11111111, B11111111, B11111111, B11111111, B11100000, B00000000, B00000000, B00000000,
  B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, B00000000, B00000000,

  B11111111, B11111111, B11111111, B11111111, B11111000, B00000000, B00000000, B00000000,
  B11111111, B11111111, B11111111, B11111111, B11111100, B00000000, B00000000, B00000000,
  B11111111, B11111111, B11111111, B11111111, B11111110, B00000000, B00000000, B00000000,
  B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000,
  B11111111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000,
  B11111111, B11111111, B11111111, B11111111, B11111110, B00000000, B00000000, B00000000,
  B11111111, B11111111, B11111111, B11111111, B11111100, B00000000, B00000000, B00000000,
  B11111111, B11111111, B11111111, B11111111, B11111000, B00000000, B00000000, B00000000,

  B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, B00000000, B00000000,
  B11111111, B11111111, B11111111, B11111111, B11100000, B00000000, B00000000, B00000000,
  B11111111, B11111111, B11111111, B11111111, B10000000, B00000000, B00000000, B00000000,
  B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11111111, B11111100, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11111111, B11111000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11111111, B11100000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11111111, B10000000, B00000000, B00000000, B00000000, B00000000,

  B00000000, B00000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11111110, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11111100, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11100000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B10000000, B00000000, B00000000, B00000000, B00000000, B00000000
};

static const unsigned char PROGMEM arrow_back_bmp[] =
{
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,

  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,

  B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00000000,
  B00000000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111110, B00000000,
  B00000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111100, B00000000,
  B00000000, B00011111, B11111111, B11111111, B11111111, B11111111, B11111000, B00000000,
  B00000000, B00001111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000,
  B00000000, B00000111, B11111111, B11111111, B11111111, B11111111, B11100000, B00000000,
  B00000000, B00000011, B11111111, B11111111, B11111111, B11111111, B11000000, B00000000,
  B00000000, B00000001, B11111111, B11111111, B11111111, B11111111, B10000000, B00000000,

  B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000,
  B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000,
  B00000000, B00000000, B01111111, B11111111, B11111111, B11111110, B00000000, B00000000,
  B00000000, B00000000, B00111111, B11111111, B11111111, B11111100, B00000000, B00000000,
  B00000000, B00000000, B00001111, B11111111, B11111111, B11110000, B00000000, B00000000,
  B00000000, B00000000, B00000111, B11111111, B11111111, B11100000, B00000000, B00000000,
  B00000000, B00000000, B00000011, B11111111, B11111111, B11000000, B00000000, B00000000,
  B00000000, B00000000, B00000001, B11111111, B11111111, B10000000, B00000000, B00000000,

  B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B01111111, B11111110, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00111111, B11111100, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00011111, B11111000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00001111, B11110000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000111, B11100000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000011, B11000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000001, B10000000, B00000000, B00000000, B00000000
};


static const unsigned char PROGMEM arrow_left_bmp[] =
{
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000011, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00011111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00111111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B01111111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000,

  B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000111, B11111111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00011111, B11111111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00111111, B11111111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B11111111, B11111111,
  B00000000, B00000000, B00000000, B00000111, B11111111, B11111111, B11111111, B11111111,
  B00000000, B00000000, B00000000, B00001111, B11111111, B11111111, B11111111, B11111111,

  B00000000, B00000000, B00000000, B00011111, B11111111, B11111111, B11111111, B11111111,
  B00000000, B00000000, B00000000, B00111111, B11111111, B11111111, B11111111, B11111111,
  B00000000, B00000000, B00000000, B01111111, B11111111, B11111111, B11111111, B11111111,
  B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111,
  B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111,
  B00000000, B00000000, B00000000, B01111111, B11111111, B11111111, B11111111, B11111111,
  B00000000, B00000000, B00000000, B00111111, B11111111, B11111111, B11111111, B11111111,
  B00000000, B00000000, B00000000, B00011111, B11111111, B11111111, B11111111, B11111111,

  B00000000, B00000000, B00000000, B00001111, B11111111, B11111111, B11111111, B11111111,
  B00000000, B00000000, B00000000, B00000111, B11111111, B11111111, B11111111, B11111111,
  B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B11111111, B11111111,
  B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111,
  B00000000, B00000000, B00000000, B00000000, B01111111, B11111111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00011111, B11111111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000111, B11111111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B00000000, B00000000,

  B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B01111111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00111111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00011111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000111, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000011, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B00000000, B00000000
};

static const unsigned char PROGMEM stop_bmp[] =
{ B00000000, B00000000,
  B01100000, B00000110,
  B11110000, B00001111,
  B01111000, B00011110,
  B00111100, B00111100,
  B00011110, B01111000,
  B00001111, B11110000,
  B00000111, B11100000,
  B00000111, B11100000,
  B00001111, B11110000,
  B00011110, B01111000,
  B00111100, B00111100,
  B01111000, B00011110,
  B11110000, B00001111,
  B01100000, B00000110,
  B00000000, B00000000
};

static const unsigned char PROGMEM presentacion_bmp[] =
{ B11111111, B11111111, B11111111, B11111111, B11111111, B00000001, B01111111,
  B11111111, B11111111, B11111111, B11111111, B11111100, B00000000, B00011111,
  B11111111, B11111111, B11111111, B11111111, B11111000, B00000000, B00001111,
  B11111111, B11111111, B11111111, B11111111, B11110000, B11111111, B11001111,
  B11111100, B00000000, B01111111, B11000011, B11110000, B11111111, B11111111,
  B11110000, B00000000, B00111110, B00000000, B11100001, B10000000, B11111111,
  B11110000, B00111000, B00011000, B00000000, B00000011, B00000000, B00111111,
  B11100011, B11111111, B00000000, B00000000, B00000011, B00000000, B00001111,

  B11111111, B11111111, B00000000, B00000000, B11000110, B00001110, B00000011,
  B11111111, B10000111, B11000011, B10000011, B11100000, B00011111, B11000001,
  B11111110, B00000001, B10000111, B11100111, B11110000, B01111111, B11110000,
  B11111100, B00000000, B00001111, B11100110, B01110000, B11100000, B11111000,
  B11110000, B11111000, B00001100, B11100100, B01110000, B10000000, B01111100,
  B11000001, B11111110, B00001000, B01100100, B01110000, B00011111, B01111111,
  B10000111, B11111111, B00001100, B11100011, B11100000, B01111111, B00011111,
  B00001111, B11000000, B00000111, B00000000, B00000000, B11111111, B00001111,

  B11111111, B10000000, B00000000, B00000000, B00000000, B00000011, B11000111,
  B11111111, B00001100, B00000000, B00000000, B00000000, B00000011, B11100011,
  B11111110, B00111111, B11000000, B00000000, B00000011, B11111001, B11100111,
  B11111100, B01111100, B00000000, B00000000, B00000111, B11111100, B01100111,
  B11111000, B11110000, B00000000, B00000000, B00011111, B11111110, B01111111,
  B11111001, B11100111, B11111100, B00000000, B01111111, B11111110, B01111111,
  B11110001, B11001111, B11111111, B10000001, B11111111, B11111110, B00111111,
  B11110001, B11001111, B11111111, B11111111, B11111111, B11111110, B00111111,

  B11111011, B10011111, B11111111, B11111111, B11111111, B11111111, B01111111,
  B11111111, B10011111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B10011111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B10011111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11011111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111
};

static const unsigned char PROGMEM up_banner_bmp[] =
{
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
};

static const unsigned char PROGMEM left_banner_bmp[] =
{
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111,
};

static const unsigned char PROGMEM right_banner_bmp[] =
{
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111,
};

float CompassMeassure;
float LeftMeassure;
float LeftKalmanMeassure;
float RightMeassure;
float RightKalmanMeassure;
float FrontMeassure;
float FrontRegister[100];
float LeftRegister[100];
float LeftKalmanRegister[100];
float RightRegister[100];
float RightKalmanRegister[100];
float CompassRegister[100];
int MovementRegister[100];
int MoveBinnacle = 0;
int Packages = 0;
String Parser = "";
char CharBuffer[51];
int CursorBuffer = 0;
int centinela5 = 0;
String check = "";
int Data;

void Display_function();
void StartCommunication();
void PackagesReceptor();
void PackageCheckOut();
void Decode();
void BlankRegisters();
void MoveCommand(int s11o, int s21o, int s31o, int s41o, int s51o, int s61o,
                 int s12o, int s22o, int s32o, int s42o, int s52o, int s62o,
                 int s13o, int s23o, int s33o, int s43o, int s53o, int s63o,
                 int DelayTime);
void WakeUp();
void Adelante();
void Parche();
void Atras();
void Derecha();
void Izquierda();

//PAW1            //PAW2            //PAW3            //PAW4            //PAW5            //PAW6
int mpS11 = 95;   int mpS21 = 88;   int mpS31 = 99;   int mpS41 = 93;   int mpS51 = 93;   int mpS61 = 95;
int mpS12 = 98;   int mpS22 = 109;  int mpS32 = 95;   int mpS42 = 86;   int mpS52 = 90;   int mpS62 = 101;
int mpS13 = 95;   int mpS23 = 90;   int mpS33 = 94;   int mpS43 = 87;   int mpS53 = 90;   int mpS63 = 89;
int s11i = mpS11; int s21i = mpS21; int s31i = mpS31; int s41i = mpS41; int s51i = mpS51; int s61i = mpS61;
int s12i = mpS12; int s22i = mpS22; int s32i = mpS32; int s42i = mpS42; int s52i = mpS52; int s62i = mpS62;
int s13i = mpS13; int s23i = mpS23; int s33i = mpS33; int s43i = mpS43; int s53i = mpS53; int s63i = mpS63;

//SERVO-PAW DISCRIMINATION
//PAW1    //PAW2    //PAW3    //PAW4    //PAW5    //PAW6
Servo S11; Servo S21; Servo S31; Servo S41; Servo S51; Servo S61;
Servo S12; Servo S22; Servo S32; Servo S42; Servo S52; Servo S62;
Servo S13; Servo S23; Servo S33; Servo S43; Servo S53; Servo S63;

void setup() {
  display.begin(SSD1306_SWITCHCAPVCC);
  display.display();
  delay(1000);
  display.clearDisplay();
  display.drawBitmap(0, 0,  up_banner_bmp, 128, 10, 1);
  display.drawBitmap(0, 10,  left_banner_bmp, 40, 32, 1);
  display.drawBitmap(91, 10,  left_banner_bmp, 37, 32, 1);
  display.drawBitmap(35, 10,  presentacion_bmp, 56, 32, 1);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(10, 50);
  display.println("CHARLOTTE");
  display.display();
  delay(1000);
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(30, 10);
  display.println("Andrea");
  display.setCursor(17, 25);
  display.println("Fontalvo");
  display.setCursor(22, 40);
  display.println("Echavez");
  display.display();
  delay(1000);
  display.clearDisplay();
  //COMUNICATION INITIALIZATION
  //Serial.begin(9600);
  Serial1.begin(9600);
  Serial2.begin(9600);
  Serial.begin(9600);
  //SERVO-PIN ATTACH
  //PAW1            //PAW2            //PAW3            //PAW4            //PAW5            //PAW6
  S11.attach(2);    S21.attach(5);    S31.attach(8);    S41.attach(45);   S51.attach(42);   S61.attach(39);
  S12.attach(3);    S22.attach(6);    S32.attach(46);    S42.attach(44);   S52.attach(41);   S62.attach(38);
  S13.attach(4);    S23.attach(7);    S33.attach(47);   S43.attach(43);   S53.attach(40);   S63.attach(37);
  S11.write(s11i);  S21.write(s21i);  S31.write(s31i);  S41.write(s41i);  S51.write(s51i);  S61.write(s61i);
  S12.write(s12i);  S22.write(s22i);  S32.write(s32i);  S42.write(s42i);  S52.write(s52i);  S62.write(s62i);
  S13.write(s13i);  S23.write(s23i);  S33.write(s33i);  S43.write(s43i);  S53.write(s53i);  S63.write(s63i);
  delay(3000);
  WakeUp();
}

void loop() {
  char B = (char)Serial1.read();
  //DEPURACION
  //char B = (char)Serial.read();
  Serial.println(B);
  if (isDigit(B)) {
    check = B;
    Data = check.toInt();
  }
  switch (Data) {
    case 1:
      Adelante();
      MoveBinnacle = 1;
      Display_function( MoveBinnacle);
      StartCommunication(); //Inicia comunicación con supersensor
      Communication();
      //Serial.println("Adelante");
      break;
    case 2:
      Atras();
      MoveBinnacle = 2;
      Display_function( MoveBinnacle);
      StartCommunication(); //Inicia comunicación con supersensor
      Communication();
      //Serial.println("Atrás");
      break;
    case 3:
      Derecha();
      MoveBinnacle = 3;
      Display_function( MoveBinnacle);
      StartCommunication(); //Inicia comunicación con supersensor
      Communication();
      //Serial.println("Derecha");
      break;
    case 4:
      Izquierda();
      MoveBinnacle = 4;
      Display_function( MoveBinnacle);
      StartCommunication(); //Inicia comunicación con supersensor
      Communication();
      //Serial.println("Izquierda");
      break;
    case 5:
      Parche();
      MoveBinnacle = 5;
      Display_function(MoveBinnacle);
      StartCommunication(); //Inicia comunicación con supersensor
      Communication();
      //Serial.println("Detener");
      break;
  }
}

//FUNCTION MOVES PER AXIS
void MoveCommand(int s11o, int s21o, int s31o, int s41o, int s51o, int s61o,
                 int s12o, int s22o, int s32o, int s42o, int s52o, int s62o,
                 int s13o, int s23o, int s33o, int s43o, int s53o, int s63o,
                 int DelayTime) {
  //CALCULATE SWEEP ANGLES
  float SweepAngles[18];
  SweepAngles[0] = s11o - s11i;  SweepAngles[1] = s12o - s12i;  SweepAngles[2] = s13o - s13i;
  SweepAngles[3] = s21o - s21i;  SweepAngles[4] = s22o - s22i;  SweepAngles[5] = s23o - s23i;
  SweepAngles[6] = s31o - s31i;  SweepAngles[7] = s32o - s32i;  SweepAngles[8] = s33o - s33i;
  SweepAngles[9] = s41o - s41i;  SweepAngles[10] = s42o - s42i; SweepAngles[11] = s43o - s43i;
  SweepAngles[12] = s51o - s51i; SweepAngles[13] = s52o - s52i; SweepAngles[14] = s53o - s53i;
  SweepAngles[15] = s61o - s61i; SweepAngles[16] = s62o - s62i; SweepAngles[17] = s63o - s63i;
  //CALCULATE FOR LOOP LIMIT
  int Limit = 180;
  for (int j = 0 ; j <= 17 ; j++) {
    if (SweepAngles[j] != 0) {
      Limit = min(abs(SweepAngles[j]), Limit);
    }
  }
  if (Limit == 1) {
    Limit = 30;
  }
  Limit = 40;
  //EXECUTE SERVO MOVES
  for (int k = 0 ; k <= Limit ; k++) {
    if (SweepAngles[0] == 0) {
      S11.write(s11o);
    } else {
      S11.write(s11i + (SweepAngles[0] / Limit)*k);
    }
    if (SweepAngles[1] == 0) {
      S12.write(s12o);
    } else {
      S12.write(s12i + (SweepAngles[1] / Limit)*k);
    }
    if (SweepAngles[2] == 0) {
      S13.write(s13o);
    } else {
      S13.write(s13i + (SweepAngles[2] / Limit)*k);
    }
    if (SweepAngles[3] == 0) {
      S21.write(s21o);
    } else {
      S21.write(s21i + (SweepAngles[3] / Limit)*k);
    }
    if (SweepAngles[4] == 0) {
      S22.write(s22o);
    } else {
      S22.write(s22i + (SweepAngles[4] / Limit)*k);
    }
    if (SweepAngles[5] == 0) {
      S23.write(s23o);
    } else {
      S23.write(s23i + (SweepAngles[5] / Limit)*k);
    }
    if (SweepAngles[6] == 0) {
      S31.write(s31o);
    } else {
      S31.write(s31i + (SweepAngles[6] / Limit)*k);
    }
    if (SweepAngles[7] == 0) {
      S32.write(s32o);
    } else {
      S32.write(s32i + (SweepAngles[7] / Limit)*k);
    }
    if (SweepAngles[8] == 0) {
      S33.write(s33o);
    } else {
      S33.write(s33i + (SweepAngles[8] / Limit)*k);
    }
    if (SweepAngles[9] == 0) {
      S41.write(s41o);
    } else {
      S41.write(s41i + (SweepAngles[9] / Limit)*k);
    }
    if (SweepAngles[10] == 0) {
      S42.write(s42o);
    } else {
      S42.write(s42i + (SweepAngles[10] / Limit)*k);
    }
    if (SweepAngles[11] == 0) {
      S43.write(s43o);
    } else {
      S43.write(s43i + (SweepAngles[11] / Limit)*k);
    }

    if (SweepAngles[12] == 0) {
      S51.write(s51o);
    } else {
      S51.write(s51i + (SweepAngles[12] / Limit)*k);
    }
    if (SweepAngles[13] == 0) {
      S52.write(s52o);
    } else {
      S52.write(s52i + (SweepAngles[13] / Limit)*k);
    }
    if (SweepAngles[14] == 0) {
      S53.write(s53o);
    } else {
      S53.write(s53i + (SweepAngles[14] / Limit)*k);
    }
    if (SweepAngles[15] == 0) {
      S61.write(s61o);
    } else {
      S61.write(s61i + (SweepAngles[15] / Limit)*k);
    }
    if (SweepAngles[16] == 0) {
      S62.write(s62o);
    } else {
      S62.write(s62i + (SweepAngles[16] / Limit)*k);
    }
    if (SweepAngles[17] == 0) {
      S63.write(s63o);
    } else {
      S63.write(s63i + (SweepAngles[17] / Limit)*k);
    }
    delay(DelayTime);
  }
  //ASSIGN FINAL ANGLES AS BEGIN ANGLES
  s11i = s11o;  s21i = s21o;  s31i = s31o;  s41i = s41o;  s51i = s51o;  s61i = s61o;
  s12i = s12o;  s22i = s22o;  s32i = s32o;  s42i = s42o;  s52i = s52o;  s62i = s62o;
  s13i = s13o;  s23i = s23o;  s33i = s33o;  s43i = s43o;  s53i = s53o;  s63i = s63o;
}

void WakeUp() {
  //11097N12099N13094N21089N22111N23090N31101N32099N33098N
  //41094N42085N43089N51092N52090N53090N61094N62102N63091N
  MoveCommand( 97, 89, 101, 94, 92, 94,
               99, 111, 99, 85, 90, 102,
               94, 90, 98, 89, 90, 91,
               10);

  //11097N12129N13124N21089N22141N23124N31101N32129N33128N
  //41094N42115N43119N51092N52120N53120N61094N62132N63121N
  MoveCommand( 97, 89, 101, 94, 92, 94,
               129, 141, 129, 115, 120, 132,
               124, 124, 128, 119, 120, 121,
               10);

  //11097N12069N13064N21089N22081N23064N31101N32069N33068N
  //41094N42055N43059N51092N52060N53060N61094N62072N63061N
  MoveCommand( 97, 89, 101, 94, 92, 94,
               69, 81, 69, 55, 60, 72,
               64, 64, 68, 59, 60, 61,
               10);
}

void Adelante() {
  //11097N12069N13064N21089N22141N23124N31101N32069N33068N
  //41094N42115N43119N51092N52060N53060N61094N62132N63121N
  MoveCommand( 97, 89, 101, 94, 92, 94,
               69, 141, 69, 115, 60, 132,
               64, 124, 68, 119, 60, 121,
               10);

  //11097N12079N13094N21089N22141N23124N31101N32079N33058N
  //41094N42115N43119N51072N52070N53060N61094N62132N63121N
  MoveCommand( 97, 89, 101, 94, 72, 94,
               79, 141, 79, 115, 70, 132,
               94, 124, 58, 119, 60, 121,
               10);

  //11097N12129N13124N21089N22081N23064N31101N32129N33128N
  //41094N42055N43059N51092N52120N53120N61094N62072N63061N
  MoveCommand( 97, 89, 101, 94, 92, 94,
               129, 81, 129, 55, 120, 72,
               124, 64, 128, 59, 120, 61,
               10);

  //11097N12129N13124N21109N22081N23064N31101N32129N33128N
  //41094N42065N43089N51092N52120N53120N61094N62082N63051N
  MoveCommand( 97, 109, 101, 94, 92, 94,
               129, 81, 129, 65, 120, 82,
               124, 64, 128, 89, 120, 51,
               10);
}

void Parche() {
  //11097N12069N13064N21089N22081N23064N31101N32069N33068N
  //41094N42055N43059N51092N52060N53060N61094N62072N63061N
  MoveCommand( 97, 89, 101, 94, 92, 94,
               69, 81, 69, 55, 60, 72,
               64, 64, 68, 59, 60, 61,
               10);
}

void Atras() {
  //11097N12069N13064N21089N22141N23124N31101N32069N33068N
  //41094N42115N43119N51092N52060N53060N61094N62132N63121N
  MoveCommand( 97, 89, 101, 94, 92, 94,
               69, 141, 69, 115, 60, 132,
               64, 124, 68, 119, 60, 121,
               10);

  //11097N12069N13044N21089N22141N23124N31101N32069N33083N
  //41094N42115N43119N51112N52060N53060N61094N62132N63121N
  MoveCommand( 97, 89, 101, 94, 112, 94,
               69, 141, 69, 115, 60, 132,
               44, 124, 83, 119, 60, 121,
               10);

  //11097N12129N13124N21089N22081N23064N31101N32129N33128N
  //41094N42055N43059N51092N52120N53120N61094N62072N63061N
  MoveCommand( 97, 89, 101, 94, 92, 94,
               129, 81, 129, 55, 120, 72,
               124, 64, 128, 59, 120, 61,
               10);

  //11097N12129N13124N21069N22081N23064N31101N32129N33128N
  //41094N42065N43049N51092N52120N53120N61094N62072N63081N
  MoveCommand( 97, 69, 101, 94, 92, 94,
               129, 81, 129, 65, 120, 72,
               124, 64, 128, 49, 120, 81,
               10);
}

void Izquierda() {
  //11097N12069N13064N21089N22081N23064N31101N32069N33068N
  //41094N42055N43059N51092N52060N53060N61094N62072N63061N
  MoveCommand( 97, 89, 101, 94, 92, 94,
               69, 81, 69, 55, 60, 72,
               64, 64, 68, 59, 60, 61,
               10);

  //11127N12129N13124N21089N22081N23064N31131N32129N33128N
  //41094N42055N43059N51122N52120N53120N61094N62072N63061N
  MoveCommand( 127, 89, 131, 94, 122, 94,
               129, 81, 129, 55, 120, 72,
               124, 64, 128, 59, 120, 61,
               10);

  //11127N12069N13064N21119N22141N23124N31131N32069N33068N
  //41124N42115N43119N51122N52060N53060N61124N62132N63121N
  MoveCommand( 127, 119, 131, 124, 122, 124,
               69, 141, 69, 115, 60, 132,
               64, 124, 68, 119, 60, 121,
               10);

  //11097N12069N13064N21119N22081N23064N31101N32069N33068N
  //41124N42055N43059N51092N52060N53060N61124N62072N63061N
  MoveCommand( 97, 119, 101, 124, 92, 124,
               69, 81, 69, 55, 60, 72,
               64, 64, 68, 59, 60, 61,
               10);
}

void Derecha() {

  //11097N12069N13064N21089N22081N23064N31101N32069N33068N
  //41094N42055N43059N51092N52060N53060N61094N62072N63061N
  MoveCommand( 97, 89, 101, 94, 92, 94,
               69, 81, 69, 55, 60, 72,
               64, 64, 68, 59, 60, 61,
               10);

  //11067N12129N13124N21089N22081N23064N31071N32129N33128N
  //41094N42055N43059N51062N52120N53120N61094N62072N63061N
  MoveCommand( 67, 89, 71, 94, 62, 94,
               129, 81, 129, 55, 120, 72,
               124, 64, 128, 59, 120, 61,
               10);

  //11067N12069N13064N21059N22141N23124N31071N32069N33068N
  //41064N42115N43119N51062N52060N53060N61064N62132N63121N
  MoveCommand( 67, 59, 71, 64, 62, 64,
               69, 141, 69, 115, 60, 132,
               64, 124, 68, 119, 60, 121,
               10);

  //11097N12069N13064N21059N22081N23064N31101N32069N33068N
  //41064N42055N43059N51092N52060N53060N61064N62072N63061N
  MoveCommand( 97, 59, 101, 64, 92, 64,
               69, 81, 69, 55, 60, 72,
               64, 64, 68, 59, 60, 61,
               10);
}

void Communication() {
  int centinela6 = 0; //llave del loop de verificacion
  int counter = 0; //contador del loop de verificacion
  int centinela7 = 1; //llave cuando matlab contesta
  int centinela8 = 1;
  while (centinela6 == 0) {
    char a = (char)Serial1.read();
    //DEPURACION
    Serial.println(a);
    //char a = (char)Serial.read();
    if (isUpperCase(a)) {
      Parser = a;
      if (Parser == "R") {
        centinela6 = 1;
        centinela8 = 0;
      }
    } else {
      Parser = "";
      counter = counter + 1;
    }
    if (counter == 100) {
      centinela6 = 1;
    }
  }
  //  while (centinela7 == 0) {
  //    Serial1.print("P");
  //    //DEPURACION
  //    //Serial.print("P");
  //    float ParserPackages = Packages * 0.001;
  //    Serial1.println(ParserPackages, 5);
  //    Serial.println(ParserPackages, 5);
  //    //DEPURACION
  //    //Serial.println(ParserPackages, 5);
  //    //delay(1);
  //    centinela8 = 0;
  //    centinela7 = 1;
  //  }
  
  Serial1.print("P");
        //DEPURACION
        //Serial.print("P");
        float ParserPackages = Packages * 0.001;
        Serial1.println(ParserPackages, 5);
        Serial.println(ParserPackages, 5);
        delay(100);
  while (centinela8 == 0) {
    
    char a = (char)Serial1.read();
    //DEPURACION
    //char a = (char)Serial.read();
    if (isUpperCase(a)) {
      Parser = a;
      if (Parser == "Y") {
        for (int i = 0; i < Packages; i++) {
          Serial1.print("M"); Serial1.print(MovementRegister[i] * 0.001, 5);
          Serial1.print("F"); Serial1.print(FrontRegister[i] * 0.001, 5);
          Serial1.print("L"); Serial1.print(LeftRegister[i] * 0.001, 5);
          Serial1.print("K"); Serial1.print(LeftKalmanRegister[i] * 0.001, 5);
          Serial1.print("R"); Serial1.print(RightRegister[i] * 0.001, 5);
          Serial1.print("K"); Serial1.print(RightKalmanRegister[i] * 0.001, 5);
          Serial1.print("C"); Serial1.println(CompassRegister [i] * 0.001, 5);
          //DEPURACION
          //          Serial.print("M"); Serial.print(MovementRegister[i] * 0.001, 5);
          //          Serial.print("F"); Serial.print(FrontRegister[i] * 0.001, 5);
          //          Serial.print("L"); Serial.print(LeftRegister[i] * 0.001, 5);
          //          Serial.print("R"); Serial.print(RightRegister[i] * 0.001, 5);
          //          Serial.print("C"); Serial.println(CompassRegister [i] * 0.001, 5);
          //          delay(1);
          Parser = "";
        }
      }
       
      //Serial.println("salio");

      if (Parser == "K") {
        //Serial.println("entro");
        //BlankRegisters();
        //Serial1.println("K");
        //DEPURACION
        //Serial.println("K");
        Packages = 0;
        Parser = "";
        break;
        centinela8 = 1;
      }
    } //else {
    //Parser = "";
    //}
  }
}

//void BlankRegisters() {
//  for (int j = 0; j < sizeof(FrontRegister) - 1; j++) {
//    FrontRegister[j] = 0.0;
//    LeftRegister[j] = 0.0;
//    RightRegister[j] = 0.0;
//    FrontRegister[j] = 0.0;
//    MovementRegister[j] = 0.0;
//  }
//}

void StartCommunication() {
  Serial2.println("B");   // KEY TO BEGIN THE COMMUNICATION
  PackagesReceptor();
}

void PackagesReceptor() {
  while (centinela5 == 0) {
    if (Serial2.available() > 0) {
      char InChar = (char)Serial2.read();
      if (isUpperCase(InChar) || isDigit(InChar) || isPunct(InChar)) {
        CharBuffer[CursorBuffer] = InChar;
        CursorBuffer = CursorBuffer + 1;
      }
    }
    if (CursorBuffer == 50) {
      CursorBuffer = 0;
      break;              // BYPASSING WHILE LOOP
    }
  }
  PackageCheckOut();
}

void PackageCheckOut() {
  if (CharBuffer[0] == 'I' && CharBuffer[1] == 'C' && CharBuffer[9] == 'L' && CharBuffer[17] == 'K' && CharBuffer[25] == 'R'  && CharBuffer[33] == 'K' && CharBuffer[41] == 'F' && CharBuffer[49] == 'T') {
    Decode();             // CHECK PACKAGE
  } else {
    StartCommunication(); // ARQ
  }
}

void Decode() {
  String parser5 = "";

  for (int j = 4; j < 9; j++) {
    parser5 = parser5 + String(CharBuffer[j]);
  }
  CompassMeassure = parser5.toFloat() * 0.01;
  CompassRegister[Packages] =  CompassMeassure;
  //Serial2.println(CompassMeassure);
  parser5 = "";

  for (int j = 12; j < 17; j++) {
    parser5 = parser5 + String(CharBuffer[j]);
  }
  LeftMeassure = parser5.toFloat() * 0.01;
  LeftRegister[Packages] = LeftMeassure;
  //Serial2.println(LeftMeassure);
  parser5 = "";

  for (int j = 20; j < 25; j++) {
    parser5 = parser5 + String(CharBuffer[j]);
  }
  LeftKalmanMeassure = parser5.toFloat() * 0.01;
  LeftKalmanRegister[Packages] = LeftKalmanMeassure;
  //Serial2.println(RightMeassure);
  parser5 = "";

  for (int j = 28; j < 33; j++) {
    parser5 = parser5 + String(CharBuffer[j]);
  }
  RightMeassure = parser5.toFloat() * 0.01;
  RightRegister[Packages] = RightMeassure;
  //Serial2.println(RightMeassure);
  parser5 = "";

  for (int j = 36; j < 41; j++) {
    parser5 = parser5 + String(CharBuffer[j]);
  }
  RightKalmanMeassure = parser5.toFloat() * 0.01;
  RightKalmanRegister[Packages] = RightKalmanMeassure;
  //Serial2.println(RightMeassure);
  parser5 = "";

  for (int j = 44; j < 49; j++) {
    parser5 = parser5 + String(CharBuffer[j]);
  }
  FrontMeassure = parser5.toFloat() * 0.01;
  FrontRegister[Packages] = FrontMeassure;
  //Serial2.println(FrontMeassure);

  MovementRegister[Packages] = MoveBinnacle;
  Packages = Packages + 1;
  BlankCharBuffer();
}

void BlankCharBuffer() {
  for (int j = 0; j < sizeof(CharBuffer) - 1; j++) {
    CharBuffer[j] = 'x';
  }
}

void Display_function(int movement) {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(BLACK, WHITE);
  display.setCursor(10, 0);
  display.println("CHARLOTTE");
  switch (movement) {
    case 1:
      display.drawBitmap(32, 20,  arrow_forward_bmp, 64, 40, 1);
      break;
    case 2:
      display.drawBitmap(32, 20,  arrow_back_bmp, 64, 40, 1);
      break;
    case 3:
      display.drawBitmap(40, 20,  arrow_right_bmp, 64, 40, 1);
      break;
    case 4:
      display.drawBitmap(15, 20,  arrow_left_bmp, 64, 40, 1);
      break;
    case 5:
      display.setTextSize(3);
      display.setTextColor(WHITE);
      display.setCursor(0, 30);
      display.println("STOPPED");
      break;
  }
  display.display();
}
